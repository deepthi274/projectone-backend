package com.project2.mediciERS;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;

import com.project2.mediciERS.dao.ReimbursementRepositoryDao;
import com.project2.mediciERS.entity.Reimbursement;
import com.project2.mediciERS.exception.ApplicationException;
import com.project2.mediciERS.pojo.ReimbursementPojo;
import com.project2.mediciERS.service.ReimbursementService;

@RunWith(SpringRunner.class)
@SpringBootTest
public class ReimbursementServiceTest {
	
	@Autowired
	private ReimbursementService reimbursementService;
	
	
	
	@MockBean
	private ReimbursementRepositoryDao reimbursementRepositoryDao;
	
	@Test
	public void getSpecificRequests() throws ApplicationException {
		when(reimbursementRepositoryDao.findByUserIdAndRbRemoved(2, false)).thenReturn(Stream
				.of(new Reimbursement(1, 2, new Date(12-02-2021), 500, "pending", false, false)).
				collect(Collectors.toList()));
		assertEquals(1,reimbursementService.getSpecificRequests(2,false).size());
		
		}
	
	@Test
	public void getAllPendingTest() throws ApplicationException {
		Reimbursement reimbursement1 = new Reimbursement();
		reimbursement1.setRbId(1);
		reimbursement1.setUserId(2);
		reimbursement1.setRbDate(new Date(12-03-2021));
		reimbursement1.setRbAmount(500);
		reimbursement1.setRbStatus("pending");
		reimbursement1.setRbResolved(false);
		reimbursement1.setRbRemoved(false);
		
		Reimbursement reimbursement2 = new Reimbursement();
		reimbursement2.setRbId(2);
		reimbursement2.setUserId(3);
		reimbursement2.setRbDate(new Date(12-04-2021));
		reimbursement2.setRbAmount(100);
		reimbursement2.setRbStatus("pending");
		reimbursement2.setRbResolved(false);
		reimbursement2.setRbRemoved(false);
		
		List<Reimbursement> reimbursementList = new ArrayList<>();
		reimbursementList.add(reimbursement1);
		
		
	}
	
	@Test
	public void getAllResolvedTest() throws ApplicationException {
		Reimbursement reimbursement1 = new Reimbursement();
		reimbursement1.setRbId(1);
		reimbursement1.setUserId(2);
		reimbursement1.setRbDate(new Date(12-03-2021));
		reimbursement1.setRbAmount(500);
		reimbursement1.setRbStatus("resolved");
		reimbursement1.setRbResolved(true);
		reimbursement1.setRbRemoved(false);
		
		Reimbursement reimbursement2 = new Reimbursement();
		reimbursement2.setRbId(2);
		reimbursement2.setUserId(3);
		reimbursement2.setRbDate(new Date(12-04-2021));
		reimbursement2.setRbAmount(100);
		reimbursement2.setRbStatus("resolved");
		reimbursement2.setRbResolved(true);
		reimbursement2.setRbRemoved(false);
		
		List<Reimbursement> reimbursementList = new ArrayList<>();
		reimbursementList.add(reimbursement1);
		
		
	}
	
	@Test
	public void submitRequestTest() throws ApplicationException {
		ReimbursementPojo reimbursementPojo = new ReimbursementPojo();
		Reimbursement reimbursement = new Reimbursement();
		reimbursement.setRbId(1);
		reimbursement.setUserId(2);
		reimbursement.setRbDate(new Date(12-03-2021));
		reimbursement.setRbAmount(500);
		reimbursement.setRbStatus("pending");
		reimbursement.setRbResolved(false);
		reimbursement.setRbRemoved(false);
		
		Mockito.when(reimbursementRepositoryDao.saveAndFlush(reimbursement)).thenReturn(reimbursement);
		assertEquals(1, reimbursementService.submitRequest(reimbursementPojo));

}
	
}